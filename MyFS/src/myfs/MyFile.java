package myfs;
import java.util.*;
import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.text.SimpleDateFormat;
public class MyFile {

	private static String LS_COMMAND = "ls";
	private static String LS_PY = "ls_py";
	private static String ID_DIR = "id_dir";
	private static String DEFINE = "define";
	private static String READMOD = "readmod";
	private static String SETMOD = "setmod";
	private static String CAT = "cat";
	private static String APPEND = "append";
	private static String BACKUP = "bc";
	private static String LONG = "greplong";
	private static String HELP = "help";
	private static String EXIT = "exit";
	public static void listDirectory(String path) {
		try {
			File file  = new File(path);
			if(!file.isDirectory() || !file.exists()) {
				throw new Exception("Неправильный путь");
			}
			
			File[] list = file.listFiles();
			
			if (list != null) {
				for (int i=0; i < list.length; i++) {
					System.out.println(list[i].getName());
				}
			}
		} catch (Exception e) {
			
			System.out.print(e);
		}
		
		
	}
	
	public static void listPythonFiles(String path) {
		try {
			File file = new File(path);
			if(!file.isDirectory() || !file.exists()) {
				throw new Exception("Неправильный путь");
			}
			
			File[] list = file.listFiles();
			ArrayList<String> listPy = new ArrayList<>();
			if(list != null) {
				for (File l : list) {
					if(l.isFile() && l.getName().endsWith(".py")) {
						listPy.add(l.getName());
					}					
				}				
			}
			if(listPy.size() == 0) {
				System.out.print("Файл с разрешением .py не найден");
			}
			for(int i = 0; i < listPy.size(); i++) {
				System.out.println(listPy.get(i));
			}
		} catch (Exception e) {
			System.out.println(e);
		}
	}
	
	public static void isDirectory(String path) {
		try {
			File file = new File(path);
			System.out.println(file.isDirectory());
		} catch (Exception e) {
			System.out.println(e);
		}
		
	}
	
	public static void define(String path) {
		try {
			File file = new File(path);
			if(file.isDirectory()) {
				System.out.println("Директория");
			}else if(file.isFile()) {
				System.out.println("Файл");
			} else {
				System.out.println("Не найдено!!!");
			}
		} catch (Exception e) {
			System.out.println(e);
		}
		
	}
	
	public static void printPermissions(String path) {
		try {
			File file = new File(path);
			if (!file.exists()) {
				System.out.print("Файл не найден");
			}
			if (file.canRead()) {
				System.out.print("r");
			} else {
				System.out.print("-");
			}
			if (file.canWrite()) {
				System.out.print("w");
			} else {
				System.out.print("-");
			}
			if (file.canExecute()) {
				System.out.print("x");
			} else {
				System.out.print("-");
			}
		} catch (Exception e) {
			System.out.println(e);
		}
		
		//System.out.print(flags);
	}
	
	public static void setPermissions(String path, String permissions) {
		try {
			File file = new File(path);
			for (int i = 0; i < permissions.length(); i++) {
				char c = permissions.charAt(i);
				if (c == 'r' ) {
					file.setReadable(true);
				} else {
					file.setReadable(false);
				}
				if (c == 'w' ) {
					file.setWritable(true);
				} else {
					file.setWritable(false);
				}
				if (c == 'x' ) {
					file.setExecutable(true);
				} else {
					file.setExecutable(false);
				}
			}
			System.out.println("Права установлены");
			
		} catch(Exception e) {
			System.out.println(e);
		}
	}
	
	public static void printContent(String path) {
		try {
			File file = new File(path);
			if (!file.isFile() || !file.exists()) {
                throw new Exception("incorrect file path");
            }
			try(Scanner cat = new Scanner(file)) {
				while (cat.hasNext()) {
					System.out.println(cat.nextLine());
				}
			} catch (Exception e) {
				System.out.println(e);
			}
		} catch (Exception e) {
			System.out.println(e);
		}
	}
	
	 // добавляет строке # Autogenerated line в конец path - append
    public static void appendFooter(String path) {
    	try {
    		File file = new File(path);
    		if (!file.isFile() || !file.exists()) {
                throw new Exception("incorrect file path");
            }
    		FileWriter footer = new FileWriter(file, true);
    		footer.append("\n# Autogenerated line");
    		footer.close();
    	} catch (Exception e) {
    		System.out.println(e);
    	} 
    }
	
    public static void createBackup(String path) {
    	try {
    		File file = new File(path);
    		if (!file.exists()) {
                throw new Exception("incorrect file or directory path");
            }
    		SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
    		Calendar calendar = Calendar.getInstance();
    		File bcFile = new File("/tmp/" + sdf.format(calendar.getTime()) + ".backup");
    		Files.copy(Path.of(file.getPath()), Path.of(bcFile.getPath()));
    		File[] fileList = file.listFiles();
    		if(fileList != null) {
    			for(File f : fileList) {
    				try {
    					Files.copy(Path.of(f.getPath()), Path.of(bcFile.getPath() + "/" + f.getName())  );
    				} catch (Exception e) {
    					System.out.println(e);
    				}
    			}
    		}
    	} catch (Exception e) {
    		System.out.println(e);
    	}
    }
    
    public static void printLongestWord(String path) {
    	try {
    		File file = new File(path);
    		if (!file.isFile() || !file.exists()) {
                throw new Exception("incorrect filepath");
            }
    		Scanner sc = new Scanner(file);
    		String longWord = "";
    		String tmp;
    		while (sc.hasNext()) {
    			tmp = sc.next();
    			if(tmp.length() > longWord.length()) {
    				longWord = tmp;
    			}
    		}
    		if (longWord.length() == 0) {
    			System.out.println("Пустой файл");
    		}
    		System.out.println(longWord);
    	} catch (Exception e) {
    		System.out.println(e);
    	}
    }
    public static void help() {
    	System.out.println("ls <path>               выводит список всех файлов и директорий для `path`");
    	System.out.println("ls_py <path>            выводит список файлов с расширением `.py` в `path`");
    	System.out.println("is_dir <path>           выводит `true`, если `path` это директория, в других случаях `false`");
    	System.out.println("define <path>           выводит `директория` или `файл` в зависимости от типа `path`");
    	System.out.println("readmod <path>          выводит права для файла в формате `rwx` для текущего пользователя");
    	System.out.println("setmod <path> <perm>    устанавливает права для файла `path`");
    	System.out.println("cat <path>              выводит контент файла");
    	System.out.println("append <path>           добавляет строку `# Autogenerated line` в конец `path`");
    	System.out.println("bc <path>               создает копию `path` в директорию `/tmp/${date}.backup` где, date - это дата в формате `dd-mm-yyyy`");
    	System.out.println("greplong <path>         выводит самое длинное слово в файле");
    	System.out.println("help                    выводит список команд и их описание");
    	System.out.println("exit                    завершает работу программы");
    }
    
    public static void exit() {
    	System.out.println("Goodbye");
    }
    
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		help();
		System.out.print("> ");
		Scanner sc = new Scanner(System.in);
		while (true) {
			String cmd = sc.nextLine();
			String[] splited = cmd.split("\\s+");
			
			if (splited[0].equals(ID_DIR)) {
				isDirectory(splited[1]);
			} else if (splited[0].equals(LS_COMMAND)) {
				listDirectory(splited[1]);
			} else if (splited[0].equals(LS_PY)) {
				listPythonFiles(splited[1]);
			}else if (splited[0].equals(DEFINE)) {
				define(splited[1]);
			}else if (splited[0].equals(READMOD)) {
				printPermissions(splited[1]);
			}else if (splited[0].equals(SETMOD)) {
				setPermissions(splited[1], splited[2]);
			}else if (splited[0].equals(CAT)) {
				printContent(splited[1]);
			}else if (splited[0].equals(APPEND)) {
				appendFooter(splited[1]);
			}else if (splited[0].equals(BACKUP)) {
				appendFooter(splited[1]);
			}else if (splited[0].equals(LONG)) {
				printLongestWord(splited[1]);
			}else if (splited[0].equals(HELP)) {
				help();
			}else if (splited[0].equals(EXIT)) {
				exit();
				return;
			} else {
				System.out.println("Такой команды нет!");
			}
			System.out.print("> ");
		}
		
		
		
	}
	

}
